<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.qf.movie.mapper.RoundMapper" >
  <resultMap id="BaseResultMap" type="com.qf.movie.entity.Round" >
    <id column="round_id" property="roundId" jdbcType="INTEGER" />
    <result column="hourse_id" property="hourseId" jdbcType="INTEGER" />
    <result column="movie_id" property="movieId" jdbcType="INTEGER" />
    <result column="round_start" property="roundStart" jdbcType="TIMESTAMP" />
    <result column="round_end" property="roundEnd" jdbcType="TIMESTAMP" />
    <result column="round_price" property="roundPrice" jdbcType="DECIMAL" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    round_id, hourse_id, movie_id, round_start, round_end, round_price
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.qf.movie.entity.RoundExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from round
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from round
    where round_id = #{roundId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from round
    where round_id = #{roundId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.qf.movie.entity.RoundExample" >
    delete from round
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.qf.movie.entity.Round" >
    insert into round (round_id, hourse_id, movie_id, 
      round_start, round_end, round_price
      )
    values (#{roundId,jdbcType=INTEGER}, #{hourseId,jdbcType=INTEGER}, #{movieId,jdbcType=INTEGER}, 
      #{roundStart,jdbcType=TIMESTAMP}, #{roundEnd,jdbcType=TIMESTAMP}, #{roundPrice,jdbcType=DECIMAL}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.qf.movie.entity.Round" useGeneratedKeys="true" keyProperty="roundId">
    insert into round
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="roundId != null" >
        round_id,
      </if>
      <if test="hourseId != null" >
        hourse_id,
      </if>
      <if test="movieId != null" >
        movie_id,
      </if>
      <if test="roundStart != null" >
        round_start,
      </if>
      <if test="roundEnd != null" >
        round_end,
      </if>
      <if test="roundPrice != null" >
        round_price,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="roundId != null" >
        #{roundId,jdbcType=INTEGER},
      </if>
      <if test="hourseId != null" >
        #{hourseId,jdbcType=INTEGER},
      </if>
      <if test="movieId != null" >
        #{movieId,jdbcType=INTEGER},
      </if>
      <if test="roundStart != null" >
        #{roundStart,jdbcType=TIMESTAMP},
      </if>
      <if test="roundEnd != null" >
        #{roundEnd,jdbcType=TIMESTAMP},
      </if>
      <if test="roundPrice != null" >
        #{roundPrice,jdbcType=DECIMAL},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.qf.movie.entity.RoundExample" resultType="java.lang.Integer" >
    select count(*) from round
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update round
    <set >
      <if test="record.roundId != null" >
        round_id = #{record.roundId,jdbcType=INTEGER},
      </if>
      <if test="record.hourseId != null" >
        hourse_id = #{record.hourseId,jdbcType=INTEGER},
      </if>
      <if test="record.movieId != null" >
        movie_id = #{record.movieId,jdbcType=INTEGER},
      </if>
      <if test="record.roundStart != null" >
        round_start = #{record.roundStart,jdbcType=TIMESTAMP},
      </if>
      <if test="record.roundEnd != null" >
        round_end = #{record.roundEnd,jdbcType=TIMESTAMP},
      </if>
      <if test="record.roundPrice != null" >
        round_price = #{record.roundPrice,jdbcType=DECIMAL},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update round
    set round_id = #{record.roundId,jdbcType=INTEGER},
      hourse_id = #{record.hourseId,jdbcType=INTEGER},
      movie_id = #{record.movieId,jdbcType=INTEGER},
      round_start = #{record.roundStart,jdbcType=TIMESTAMP},
      round_end = #{record.roundEnd,jdbcType=TIMESTAMP},
      round_price = #{record.roundPrice,jdbcType=DECIMAL}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.qf.movie.entity.Round" >
    update round
    <set >
      <if test="hourseId != null" >
        hourse_id = #{hourseId,jdbcType=INTEGER},
      </if>
      <if test="movieId != null" >
        movie_id = #{movieId,jdbcType=INTEGER},
      </if>
      <if test="roundStart != null" >
        round_start = #{roundStart,jdbcType=TIMESTAMP},
      </if>
      <if test="roundEnd != null" >
        round_end = #{roundEnd,jdbcType=TIMESTAMP},
      </if>
      <if test="roundPrice != null" >
        round_price = #{roundPrice,jdbcType=DECIMAL},
      </if>
    </set>
    where round_id = #{roundId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.qf.movie.entity.Round" >
    update round
    set hourse_id = #{hourseId,jdbcType=INTEGER},
      movie_id = #{movieId,jdbcType=INTEGER},
      round_start = #{roundStart,jdbcType=TIMESTAMP},
      round_end = #{roundEnd,jdbcType=TIMESTAMP},
      round_price = #{roundPrice,jdbcType=DECIMAL}
    where round_id = #{roundId,jdbcType=INTEGER}
  </update>

  <!--查询指定的大厅中 指定的时间段 有没有冲突的场次
  map：
    hourseid
    start:  传入的开始时间
    end:  计算出的结束
  -->
  <select id="selectClashRounds" parameterType="map" resultType="com.qf.movie.entity.Round">
    select *
    from round
    where hourse_id=#{hourseid}
    and
    (
    round_start between #{start} and #{end} or round_end between #{start} and #{end}
    or (round_start &lt; #{start} and round_end &gt; #{end})
    )
  </select>

  <!--1 根据电影id  和 指定的时间来查询场次
  map：
    movieId
    date
  -->
  <select id="selectRoundsByMovieIdAndDate" parameterType="map" resultType="com.qf.movie.entity.vo.RoundVO">
    select a.round_id,b.hourse_name,a.round_start,a.round_end,a.round_price
    from round a join hourse b
    on a.hourse_id=b.hourse_id
    where movie_id=#{movieId}
    and YEAR(round_start)=year(#{date}) and MONTH(round_start)=MONTH(#{date})
    and DAY(round_start)=DAY(#{date})
  </select>
</mapper>